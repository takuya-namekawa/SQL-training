制約の種類は大きく分けて5種類

NOT NULL制約
チェック制約
一意性制約 (UNIQUE KEY)
主キー制約(PRIMARY KEY)
参照整合性制約、外部キー制約(FOREIGN KEY)

制約の使い方
実際にデータベースのテーブルに制約を指定、あるいは変更や削除するには、どのようにすればよいか？

制約を指定するには、以下の二つの方法がある

１　テーブル作成時の追加
２　作成後の追加

制約の設定（テーブル作成時）

CREATE文で表作成する場合、列定義だどを指定出来ますが、ここでは、以下のように指定する

「No」列:int ＊ -2147483648 ~ 2147483648までの整数が入る
「品物」列:nchar(5) ＊全角半角関係なく文字が入る。(5)は５文字までという意味
「価格」列:int

CREATE TABLE 価格表 (
  No int PRIMARY KEY,
  品物 nchar(5) NOT NULL,
  価格 int CHECK(価格 >= 50)
)

「No」は主キー制約を付けている
「品物」は、空白はNGとしてNOT NULLとしている
「価格」は、50円以上としてCHECK制約を入れている

このようにテーブル作成時に入れる事が出来る

制約の設定もテーブル作成後も追加する事が可能
ただし、作成してデータを入れた後に制約を追加する場合は入れたデータと矛盾しないように注意が必要
矛盾する場合はエラーとなる

テーブル作成後の追加はALTER文を使用する

ALTER TABLE テーブル名 MODIFY　列名　定義　制約;

たとえば、以下の先ほどの表の「価格」を100円以上にしたい場合は、以下のようにします。

No.	品物	価格
1	鉛筆	80
2	ボールペン	100
3	のり	150
4	ノート	180
5	はさみ	200
6	ホッチキス	600

ALTER TABLE 価格表 MODIFY　価格 int CHECK(価格 >= 100);

また、制約を削除するにはDROP CONSTRAINT句を使います。
たとえば、先ほどの価格の項目だと、CHECK制約をなくすには以下のようにします。

ALTER TABLE 価格表 DROP CONSTRAINT 価格 int CHECK(価格　>= 100);